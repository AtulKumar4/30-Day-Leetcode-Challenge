Question :- Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.
A region is captured by flipping all 'O's into 'X's in that surrounded region.
Example:
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:
X X X X
X X X X
X X X X
X O X X
Explanation:
Surrounded regions shouldnâ€™t be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.
Answer:- 
Slightly Better version:
1. we keep track of visited nodes and don't traverse same node again if it already visited:

    def solve(self, board): 
        visit = [[False for x in row]for row in board]     # Initially put False for each node
        if not any(board): return

        m, n = len(board), len(board[0])
        save = [ij for k in range(max(m,n)) for ij in ((0, k), (m-1, k), (k, 0), (k, n-1))]
        while save:
            i, j = save.pop()
            
            if 0 <= i < m and 0 <= j < n and board[i][j] == 'O' and not visit[i][j]:
                board[i][j] = 'S'
                save += (i, j-1), (i, j+1), (i-1, j), (i+1, j)
                visit[i][j] = True     ##current node is visited now. So, mark it as true to avoid revisit

        board[:] = [['XO'[c == 'S'] for c in row] for row in board]
