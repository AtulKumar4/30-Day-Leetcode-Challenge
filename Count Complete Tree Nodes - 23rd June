Question :- Given a complete binary tree, count the number of nodes.
Note:
Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
Example:
Input: 
    1
   / \
  2   3
 / \  /
4  5 6

Output: 6
Answer :- 
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def countNodes(self, root: TreeNode) -> int:
        if not root:
            return 0
        
        leftDepth = self.getDepth(root.left)
        rightDepth = self.getDepth(root.right)
        
        if leftDepth == rightDepth:
            return pow(2,leftDepth) + self.countNodes(root.right)
        else:
            return pow(2,rightDepth) + self.countNodes(root.left)
        
    def getDepth(self,root):
        
        if not root:
            return 0
        return 1+ self.getDepth(root.left)
        
        


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def countNodes(self, root: TreeNode) -> int:
        array = []
        return len(self.inorder(root,array))
    
    
    def inorder(self,root,array):
        
        if root is not None:
            self.inorder(root.left,array)
            array.append(root.val)
            self.inorder(root.right,array)
        return array    
        
